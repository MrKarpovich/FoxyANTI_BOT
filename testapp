import logging
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime
import asyncio
from forbidden_words import FORBIDDEN_WORDS
import time


API_TOKEN = '6892031210:AAHhAMV_NEGM4CbvnwuO-vLBOKrCHACUs50'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CAPTCHA_TIMEOUT = 120  # –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
user_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø—á–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
emoji_buttons = {
    'üçé': '–Ø–±–ª–æ–∫–æ',
    'üçï': '–ü–∏—Ü—Ü–∞',
    'üçî': '–ì–∞–º–±—É—Ä–≥–µ—Ä',
    'üçü': '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏',
    'üå≠': '–•–æ—Ç-–¥–æ–≥',
    'üçø': '–ü–æ–ø–∫–æ—Ä–Ω',
    'üç©': '–ü–æ–Ω—á–∏–∫',
    'üç™': '–ü–µ—á–µ–Ω—å–µ',
    'üç´': '–®–æ–∫–æ–ª–∞–¥',
    'üç≠': '–õ–µ–¥–µ–Ω–µ—Ü',
    'ü•§': '–ö–æ–ª–∞',
    'ü•®': '–°–æ–ª–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏',
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('group_members.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cursor.execute('''  
        CREATE TABLE IF NOT EXISTS group_members (
            group_id INTEGER,
            user_id INTEGER,
            PRIMARY KEY (group_id, user_id)
        )
    ''')
    conn.commit()
    conn.close()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_db(group_id, user_id):
    conn = sqlite3.connect('group_members.db')
    cursor = conn.cursor()

    cursor.execute('''  
        INSERT OR IGNORE INTO group_members (group_id, user_id)
        VALUES (?, ?)
    ''', (group_id, user_id))

    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def is_user_in_db(group_id, user_id):
    conn = sqlite3.connect('group_members.db')
    cursor = conn.cursor()

    cursor.execute('''  
        SELECT * FROM group_members WHERE group_id = ? AND user_id = ?
    ''', (group_id, user_id))

    result = cursor.fetchone()
    conn.close()

    return result is not None

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥—Ä—É–ø–ø–µ
def log_group_activity(action, user=None, chat=None, message=None):
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message:
        log_message = f"{timestamp} - {action}: {user} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{message}' –≤ —á–∞—Ç–µ {chat}"
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    elif user and chat:
        log_message = f"{timestamp} - {action}: {user} –≤ —á–∞—Ç–µ {chat}"
    else:
        log_message = f"{timestamp} - {action}"

    # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
    logging.info(log_message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
def get_random_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=emoji, callback_data=emoji) for emoji in emoji_buttons.keys()]
    random.shuffle(buttons)
    keyboard.add(*buttons)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    logging.info("–°–æ–±—ã—Ç–∏–µ NEW_CHAT_MEMBERS —Å—Ä–∞–±–æ—Ç–∞–ª–æ")
    chat_id = message.chat.id
    chat_title = message.chat.title if message.chat.title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    for new_member in message.new_chat_members:
        user_id = new_member.id
        user_mention = f"[{new_member.full_name}](tg://user?id={user_id})"

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        log_group_activity("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫", user=user_mention, chat=chat_title)

        if new_member.id == bot.id:
            await message.reply("–î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if is_user_in_db(chat_id, user_id):
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            continue

        keyboard = get_random_keyboard()

        try:
            captcha_message = await bot.send_message(
                chat_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention}, –≤—ã–±–µ—Ä–∏ —Å–∞–º–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ (—Ñ—Ä—É–∫—Ç) –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ:"
                f"\n (–£ –≤–∞—Å 120 —Å–µ–∫ –∏–ª–∏ –±—É–¥–µ—Ç –±–∞–Ω)",
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id] = {'captcha_message_id': captcha_message.message_id, 'chat_id': chat_id}

            # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(CAPTCHA_TIMEOUT)
            if user_id in user_data:
                await bot.ban_chat_member(chat_id, user_id)
                await bot.delete_message(chat_id, captcha_message.message_id)
                del user_data[user_id]
                log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–µ–æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É", user=user_mention, chat=chat_title)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    try:
        await bot.delete_message(message.chat.id, message.message_id)
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.title or '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
def contains_forbidden_words(message_text):
    return any(word in message_text.lower() for word in FORBIDDEN_WORDS)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_text_message(message: types.Message):
    user_mention = f"[{message.from_user.full_name}](tg://user?id={message.from_user.id})"
    chat_title = message.chat.title or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    message_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    if contains_forbidden_words(message_text):
        chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if chat_member.status not in ['administrator', 'creator']:
            await bot.ban_chat_member(message.chat.id, message.from_user.id)
            log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤", user=user_mention,
                               chat=chat_title)
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω.")

        await bot.delete_message(message.chat.id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        return

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ", user=user_mention, chat=chat_title, message=message_text)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–∞–ø—á—É
@dp.callback_query_handler(lambda c: c.data in emoji_buttons.keys())
async def process_captcha(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ø—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
    if user_id in user_data:
        correct_answer = callback_query.data
        correct_item = emoji_buttons[correct_answer]

        await bot.answer_callback_query(callback_query.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {correct_item}!", show_alert=True)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        await bot.delete_message(chat_id, user_data[user_id]['captcha_message_id'])

        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞–ø—á–∏
        del user_data[user_id]

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_user_to_db(chat_id, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id, f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {callback_query.from_user.full_name}!")

        log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É", user=callback_query.from_user.full_name, chat=callback_query.message.chat.title)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    while True:
        try:
            init_db()
            executor.start_polling(dp, skip_updates=False)
        except asyncio.exceptions.TimeoutError:
            logging.warning("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
        except Exception as e:
            logging.error(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
