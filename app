import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime
import asyncio
import time

API_TOKEN = '-'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CAPTCHA_TIMEOUT = 120  # Time allowed to solve the CAPTCHA (seconds)
user_data = {}  # Stores user data, CAPTCHA status, and message IDs
user_passed = {}  # Tracks which users have passed the CAPTCHA

emoji_buttons = {
    'üçé': '–Ø–±–ª–æ–∫–æ',
    'üçï': '–ü–∏—Ü—Ü–∞',
    'üçî': '–ì–∞–º–±—É—Ä–≥–µ—Ä',
    'üçü': '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏',
    'üå≠': '–•–æ—Ç-–¥–æ–≥',
    'üçø': '–ü–æ–ø–∫–æ—Ä–Ω',
    'üç©': '–ü–æ–Ω—á–∏–∫',
    'üç™': '–ü–µ—á–µ–Ω—å–µ',
    'üç´': '–®–æ–∫–æ–ª–∞–¥',
    'üç≠': '–õ–µ–¥–µ–Ω–µ—Ü',
    'ü•§': '–ö–æ–ª–∞',
    'ü•®': '–°–æ–ª–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏',
}

# Function to send CAPTCHA message to new members
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    chat_id = message.chat.id
    for new_member in message.new_chat_members:
        if new_member.id == bot.id:
            await message.reply("–î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            continue

        user_id = new_member.id
        user_mention = f"[{new_member.full_name}](tg://user?id={user_id})"

        keyboard = InlineKeyboardMarkup(row_width=3)
        buttons = [InlineKeyboardButton(text=emoji, callback_data=emoji) for emoji in emoji_buttons.keys()]
        keyboard.add(*buttons)

        user_data[user_id] = {'captcha': True, 'time': datetime.now(), 'chat_id': chat_id, 'message_id': None}
        try:
            captcha_message = await bot.send_message(
                chat_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention}, –≤—ã–±–µ—Ä–∏ —Å–∞–º–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ: \n(–£ –≤–∞—Å 120 —Å–µ–∫ –∏–ª–∏ –±—É–¥–µ—Ç –±–∞–Ω)",
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN
            )
            user_data[user_id]['message_id'] = captcha_message.message_id
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# Function to handle CAPTCHA responses
@dp.callback_query_handler(lambda c: c.data in emoji_buttons.keys())
async def process_captcha(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in user_data:
        captcha_data = user_data[user_id]
        if captcha_data.get('captcha'):
            if (datetime.now() - captcha_data['time']).total_seconds() <= CAPTCHA_TIMEOUT:
                if callback_query.message.message_id == captcha_data['message_id']:
                    if callback_query.data == 'üçé':  # Correct answer (Apple)
                        await bot.answer_callback_query(callback_query.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É!")
                        chat_id = captcha_data['chat_id']
                        try:
                            await bot.delete_message(chat_id, captcha_data['message_id'])  # Delete CAPTCHA message
                        except Exception as e:
                            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π: {e}")

                        welcome_message = await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!")
                        await asyncio.sleep(30)  # Wait 30 seconds
                        await bot.delete_message(chat_id, welcome_message.message_id)  # Delete welcome message

                        # Mark the user as having passed the CAPTCHA
                        user_passed[user_id] = True
                        del user_data[user_id]
                    else:
                        await bot.answer_callback_query(callback_query.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.")
                        await ban_user(callback_query.message.chat.id, user_id)
                else:
                    await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç—É –∫–∞–ø—á—É.")
            else:
                await bot.answer_callback_query(callback_query.id, text="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ.")
                await ban_user(callback_query.message.chat.id, user_id)
        else:
            await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –∫–∞–ø—á—É.")
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç—É –∫–∞–ø—á—É.")

# Function to ban users and delete CAPTCHA messages
async def ban_user(chat_id, user_id):
    try:
        await bot.ban_chat_member(chat_id, user_id)
        if user_id in user_data:
            try:
                await bot.delete_message(chat_id, user_data[user_id]['message_id'])
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π: {e}")
            del user_data[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

# Function to delete messages from users who haven't passed the CAPTCHA
# Function to delete messages from users who haven't passed the CAPTCHA
@dp.message_handler()
async def delete_messages_from_unverified_users(message: types.Message):
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ user_data (—ç—Ç–æ —Ç–µ, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É)
    # –ò –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ user_passed, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É, –∏ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–¥–æ —É–¥–∞–ª—è—Ç—å
    if user_id in user_data and user_id not in user_passed:
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
            await bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∫–∞–ø—á–∏ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∏ –µ–µ, –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        pass


# Function to remove exit messages
@dp.message_handler(content_types=types.ContentTypes.LEFT_CHAT_MEMBER)
async def member_left(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ: {e}")

# Function to remove group photo updates
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_PHOTO)
async def chat_photo_changed(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ: {e}")

# Function to remove group title updates
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_TITLE)
async def chat_title_changed(message: types.Message):
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")

# Background task to check CAPTCHA timeouts
async def check_timeouts():
    while True:
        current_time = datetime.now()
        for user_id, data in list(user_data.items()):
            if data['captcha'] and (current_time - data['time']).total_seconds() > CAPTCHA_TIMEOUT:
                await ban_user(data.get('chat_id'), user_id)
        await asyncio.sleep(60)

if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(check_timeouts())
        executor.start_polling(dp, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(5)
