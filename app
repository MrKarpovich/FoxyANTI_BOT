import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime
import asyncio

API_TOKEN = '–∫–ª—é—á'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CAPTCHA_TIMEOUT = 120  # –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

user_data = {}  # –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –≤—Ä–µ–º—è –∏—Ö –∫–∞–ø—á–∏

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
emoji_buttons = {
    'üçé': '–Ø–±–ª–æ–∫–æ',
    'üçï': '–ü–∏—Ü—Ü–∞',
    'üçî': '–ì–∞–º–±—É—Ä–≥–µ—Ä',
    'üçü': '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏',
    'üå≠': '–•–æ—Ç-–¥–æ–≥',
    'üçø': '–ü–æ–ø–∫–æ—Ä–Ω',
    'üç©': '–ü–æ–Ω—á–∏–∫',
    'üç™': '–ü–µ—á–µ–Ω—å–µ',
    'üç´': '–®–æ–∫–æ–ª–∞–¥',
    'üç≠': '–õ–µ–¥–µ–Ω–µ—Ü',
    'ü•§': '–ö–æ–ª–∞',
    'ü•®': '–°–æ–ª–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏',
}

@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    chat_id = message.chat.id
    for new_member in message.new_chat_members:
        user_id = new_member.id
        user_mention = f"[{new_member.full_name}](tg://user?id={user_id})"

        keyboard = InlineKeyboardMarkup(row_width=3)
        buttons = [InlineKeyboardButton(text=emoji, callback_data=emoji) for emoji in emoji_buttons.keys()]
        keyboard.add(*buttons)

        user_data[user_id] = {'captcha': True, 'time': datetime.now(), 'chat_id': chat_id, 'message_id': None}

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π –≤ –≥—Ä—É–ø–ø—É
        try:
            captcha_message = await bot.send_message(
                chat_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention}, –≤—ã–±–µ—Ä–∏ —Å–∞–º–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ: (–£ –≤–∞—Å 120 —Å–µ–∫ –∏–ª–∏ –±—É–¥–µ—Ç –±–∞–Ω)",
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN
            )
            user_data[user_id]['message_id'] = captcha_message.message_id
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@dp.callback_query_handler(lambda c: c.data in emoji_buttons.keys())
async def process_captcha(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in user_data:
        captcha_data = user_data[user_id]
        if captcha_data.get('captcha'):
            if (datetime.now() - captcha_data['time']).total_seconds() <= CAPTCHA_TIMEOUT:
                if callback_query.data == 'üçé':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–æ –ª–∏ —è–±–ª–æ–∫–æ
                    await bot.answer_callback_query(callback_query.id, text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∫–∞–ø—á—É!")
                    chat_id = captcha_data['chat_id']
                    await bot.delete_message(chat_id, captcha_data['message_id'])  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    welcome_message = await bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É!")
                    await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥
                    await bot.delete_message(chat_id, welcome_message.message_id)  # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏
                    del user_data[user_id]
                else:
                    await bot.answer_callback_query(callback_query.id, text="–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.")
                    chat_id = captcha_data['chat_id']
                    try:
                        await bot.ban_chat_member(chat_id, user_id)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                    await bot.delete_message(chat_id, captcha_data['message_id'])
                    del user_data[user_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            else:
                await bot.answer_callback_query(callback_query.id, text="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ.")
                chat_id = captcha_data['chat_id']
                try:
                    await bot.ban_chat_member(chat_id, user_id)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await bot.delete_message(chat_id, captcha_data['message_id'])
                del user_data[user_id]
        else:
            await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –∫–∞–ø—á—É.")
    else:
        await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç—Ç—É –∫–∞–ø—á—É.")

@dp.message_handler(content_types=types.ContentTypes.LEFT_CHAT_MEMBER)
async def member_left(message: types.Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ: {e}")

@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_PHOTO)
async def chat_photo_changed(message: types.Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø—ã
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ: {e}")

@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_TITLE)
async def chat_title_changed(message: types.Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")

@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def handle_invite_link(message: types.Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é
    try:
        await bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")

async def check_timeouts():
    while True:
        current_time = datetime.now()
        for user_id, data in list(user_data.items()):
            if data['captcha'] and (current_time - data['time']).total_seconds() > CAPTCHA_TIMEOUT:
                chat_id = data.get('chat_id')
                if chat_id:
                    try:
                        await bot.ban_chat_member(chat_id, user_id)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                if 'message_id' in data:
                    await bot.delete_message(chat_id, data['message_id'])
                del user_data[user_id]
        await asyncio.sleep(60)

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(check_timeouts())
    executor.start_polling(dp, skip_updates=True)
