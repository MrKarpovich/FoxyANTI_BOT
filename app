import logging
import random
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from datetime import datetime
import asyncio
from forbidden_words import FORBIDDEN_WORDS
import time

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '-'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

CAPTCHA_TIMEOUT = 120  # –í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
user_data = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ø—á–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
emoji_buttons = {
    'üçé': '–Ø–±–ª–æ–∫–æ',
    'üçï': '–ü–∏—Ü—Ü–∞',
    'üçê': '–ì—Ä—É—à–∞',
    'üçî': '–ì–∞–º–±—É—Ä–≥–µ—Ä',
    'üçü': '–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏',
    'üå≠': '–•–æ—Ç-–¥–æ–≥',
    'üçø': '–ü–æ–ø–∫–æ—Ä–Ω',
    'üç©': '–ü–æ–Ω—á–∏–∫',
    'üç™': '–ü–µ—á–µ–Ω—å–µ',
    'üç´': '–®–æ–∫–æ–ª–∞–¥',
    'üç≠': '–õ–µ–¥–µ–Ω–µ—Ü',
    'ü•§': '–ö–æ–ª–∞',
    'ü•®': '–°–æ–ª–µ–Ω—ã–µ –ø–∞–ª–æ—á–∫–∏',
    'üí°': '–õ–∞–º–ø–æ—á–∫–∞',  # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–º–ø–æ—á–∫—É
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö group_members
def init_group_db():
    try:
        conn = sqlite3.connect('group_members.db')
        cursor = conn.cursor()
        cursor.execute('''  
            CREATE TABLE IF NOT EXISTS group_members (
                group_id INTEGER,
                user_id INTEGER,
                PRIMARY KEY (group_id, user_id)
            )
        ''')
        conn.commit()
        conn.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö group_members.db —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö group_members: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö good_users
def init_good_users_db():
    try:
        conn = sqlite3.connect('good_users.db')
        cursor = conn.cursor()
        cursor.execute('''  
            CREATE TABLE IF NOT EXISTS good_users (
                group_id INTEGER,
                user_id INTEGER,
                PRIMARY KEY (group_id, user_id)
            )
        ''')
        conn.commit()
        conn.close()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö good_users.db —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö good_users: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö group_members
def add_user_to_db(group_id, user_id):
    try:
        conn = sqlite3.connect('group_members.db')
        cursor = conn.cursor()
        cursor.execute('''  
            INSERT OR IGNORE INTO group_members (group_id, user_id)
            VALUES (?, ?)
        ''', (group_id, user_id))
        conn.commit()
        conn.close()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö group_members.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö group_members: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö good_users
def add_good_user_to_db(group_id, user_id):
    try:
        conn = sqlite3.connect('good_users.db')
        cursor = conn.cursor()
        cursor.execute('''  
            INSERT OR IGNORE INTO good_users (group_id, user_id)
            VALUES (?, ?)
        ''', (group_id, user_id))
        conn.commit()
        conn.close()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö good_users.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö good_users: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö group_members
def is_user_in_group_db(group_id, user_id):
    try:
        conn = sqlite3.connect('group_members.db')
        cursor = conn.cursor()
        cursor.execute('''  
            SELECT * FROM group_members WHERE group_id = ? AND user_id = ?
        ''', (group_id, user_id))
        result = cursor.fetchone()
        conn.close()
        return result is not None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö group_members: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö good_users
def is_user_in_good_users_db(group_id, user_id):
    try:
        conn = sqlite3.connect('good_users.db')
        cursor = conn.cursor()
        cursor.execute('''  
            SELECT * FROM good_users WHERE group_id = ? AND user_id = ?
        ''', (group_id, user_id))
        result = cursor.fetchone()
        conn.close()
        return result is not None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö good_users: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –≥—Ä—É–ø–ø–µ
def log_group_activity(action, user=None, chat=None, message=None):
    timestamp = datetime.now().strftime("%d.%m.%Y %H:%M")

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message:
        log_message = f"{timestamp} - {action}: {user} –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{message}' –≤ —á–∞—Ç–µ {chat}"
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
    elif user and chat:
        log_message = f"{timestamp} - {action}: {user} –≤ —á–∞—Ç–µ {chat}"
    else:
        log_message = f"{timestamp} - {action}"

    # –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥
    logging.info(log_message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∫–∞–ø—á–∏
def get_random_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton(text=emoji, callback_data=emoji) for emoji in emoji_buttons.keys()]
    random.shuffle(buttons)
    keyboard.add(*buttons)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
import re
from fuzzywuzzy import fuzz

def contains_forbidden_words(message_text):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
    def normalize_text(text):
        # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        replacements = {
            'a': '–∞',
            'b': '–±',
            'c': '—Ü',
            'd': '–¥',
            'e': '–µ',
            'f': '—Ñ',
            'g': '–≥',
            'h': '—Ö',
            'i': '–∏',
            'j': '–π',
            'k': '–∫',
            'l': '–ª',
            'm': '–º',
            'n': '–Ω',
            'o': '–æ',
            'p': '—Ä',
            'q': '–∫',
            'r': '—Ä',
            's': '—Å',
            't': '—Ç',
            'u': '—É',
            'v': '–≤',
            'w': '–≤',
            'x': '–∫—Å',
            'y': '–∏',
            'z': '–∑',

            'A': '–ê',
            'B': '–ë',
            'C': '–¶',
            'D': '–î',
            'E': '–ï',
            'F': '–§',
            'G': '–ì',
            'H': '–•',
            'I': '–ò',
            'J': '–ô',
            'K': '–ö',
            'L': '–õ',
            'M': '–ú',
            'N': '–ù',
            'O': '–û',
            'P': '–†',
            'Q': '–ö',
            'R': '–†',
            'S': '–°',
            'T': '–¢',
            'U': '–£',
            'V': '–í',
            'W': '–í',
            'X': '–ö—Å',
            'Y': '–ò',
            'Z': '–ó',
        }

        # –ó–∞–º–µ–Ω—è–µ–º –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ
        for key, value in replacements.items():
            text = text.replace(key, value)

        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r'[*_~\\^]', '', text)  # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = re.sub(r'[\n\r\t]', ' ', text)  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏
        text = re.sub(r'[^–∞-—è–ê-–Ø—ë–Å\s]', '', text)  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text)  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

        return text.lower().strip()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    normalized_text = normalize_text(message_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ
    if any(word in normalized_text for word in FORBIDDEN_WORDS):
        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ö–æ–∂–µ—Å—Ç—å —Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    for forbidden_word in FORBIDDEN_WORDS:
        if fuzz.ratio(normalized_text, forbidden_word) > 80:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 80%
            return True

    return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É
@dp.chat_join_request_handler()
async def handle_join_request(join_request: types.ChatJoinRequest):
    chat_id = join_request.chat.id
    user_id = join_request.from_user.id
    user_mention = f"[{join_request.from_user.full_name}](tg://user?id={user_id})"
    
    try:
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.approve_chat_join_request(chat_id=chat_id, user_id=user_id)
        logging.info(f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {chat_id} –æ–¥–æ–±—Ä–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {e}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def new_member(message: types.Message):
    chat_id = message.chat.id
    chat_title = message.chat.title if message.chat.title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    for new_member in message.new_chat_members:
        user_id = new_member.id
        user_mention = f"[{new_member.full_name}](tg://user?id={user_id})"

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
        log_group_activity("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫", user=user_mention, chat=chat_title)

        if new_member.id == bot.id:
            await message.reply("–î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö group_members
        if is_user_in_group_db(chat_id, user_id):
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö group_members.")
            continue

        keyboard = get_random_keyboard()

        try:
            captcha_message = await bot.send_message(
                chat_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention}, '–í–∏—Å–∏—Ç –≥—Ä—É—à–∞, –Ω–µ–ª—å–∑—è —Å–∫—É—à–∞—Ç—å'. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
                f"\n (–£ –≤–∞—Å 120 —Å–µ–∫ –∏–ª–∏ –±—É–¥–µ—Ç –±–∞–Ω)",
                reply_markup=keyboard,
                parse_mode=types.ParseMode.MARKDOWN
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–ø—á–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data[user_id] = {'captcha_message_id': captcha_message.message_id, 'chat_id': chat_id}

            # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –±–∞–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
            await asyncio.sleep(CAPTCHA_TIMEOUT)
            if user_id in user_data:
                await bot.ban_chat_member(chat_id, user_id)
                await bot.delete_message(chat_id, captcha_message.message_id)
                del user_data[user_id]
                log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–µ–æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É", user=user_mention, chat=chat_title)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    try:
        await bot.delete_message(message.chat.id, message.message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /save –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ "—Ö–æ—Ä–æ—à–∏—Ö"
@dp.message_handler(commands=['save'])
async def save_user(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    is_admin = (await bot.get_chat_member(chat_id, user_id)).status in ["administrator", "creator"]

    if not is_admin:
        await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ '—Ö–æ—Ä–æ—à–∏—Ö'.")
        return

    if message.reply_to_message:
        good_user_id = message.reply_to_message.from_user.id
        if not is_user_in_good_users_db(chat_id, good_user_id):
            add_good_user_to_db(chat_id, good_user_id)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '—Ö–æ—Ä–æ—à–∏—Ö'.")
            log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ '—Ö–æ—Ä–æ—à–∏—Ö'", user=message.reply_to_message.from_user.full_name, chat=message.chat.title)
        else:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ '—Ö–æ—Ä–æ—à–∏—Ö'.")
    else:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_mention = f"[{message.from_user.full_name}](tg://user?id={user_id})"
    chat_title = message.chat.title or "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    message_text = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "—Ö–æ—Ä–æ—à–∏–º"
    if is_user_in_good_users_db(chat_id, user_id):
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç '—Ö–æ—Ä–æ—à–µ–≥–æ' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_mention} –Ω–µ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç "—Ö–æ—Ä–æ—à–∏—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
    if contains_forbidden_words(message_text):
        chat_member = await bot.get_chat_member(chat_id, user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if chat_member.status not in ['administrator', 'creator']:
            await bot.ban_chat_member(chat_id, user_id)
            log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤", user=user_mention, chat=chat_title)
            await bot.delete_message(chat_id, message.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        else:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_mention} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω.")

        return

    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ", user=user_mention, chat=chat_title, message=message_text)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∫–∞–ø—á–∏
@dp.callback_query_handler(lambda c: c.data in emoji_buttons.keys())
async def handle_captcha_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    selected_answer = callback_query.data

    if user_id in user_data:
        captcha_message_id = user_data[user_id]['captcha_message_id']
        if selected_answer == 'üí°':  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: —è–±–ª–æ–∫–æ
            await bot.delete_message(chat_id, captcha_message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏

            await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É.")
            add_user_to_db(chat_id, user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É", user=callback_query.from_user.full_name, chat=callback_query.message.chat.title)
        else:
            await bot.ban_chat_member(chat_id, user_id)  # –ë–∞–Ω–∏–º –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            await bot.delete_message(chat_id, captcha_message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–ø—á–∏
            log_group_activity("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É", user=callback_query.from_user.full_name, chat=callback_query.message.chat.title)

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        del user_data[user_id]
    else:
        await callback_query.answer("–í—Ä–µ–º—è –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_group_db()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
    init_good_users_db()  # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    while True:
        try:
            executor.start_polling(dp, skip_updates=False)
        except asyncio.exceptions.TimeoutError:
            logging.warning("–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
        except Exception as e:
            logging.error(f"–ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
